;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(input-method-history shell-command-history org-refile-history org-capture-template-prompt-history::Description org-tags-history read-expression-history query-replace-history query-replace-from-to-history counsel-describe-symbol-history swiper-history extended-command-history ido-file-history minibuffer-history file-name-history ido-buffer-history ivy-history counsel-M-x-history))
(setq org-refile-history '("Emacs" "Emacs/"))
(setq org-capture-template-prompt-history::Description '("test 2" "this is a test"))
(setq org-tags-history '("test" "crypt" "yong"))
(setq query-replace-history '("7z" "mp4" "mp4" "7z" "7z" "mp4" "mp4" "7z" "7z" "mp4" "mp4" "7z"))
(setq counsel-describe-symbol-history '(#("^swiper" 0 7 (ivy-index 0))))
(setq swiper-history '(#("my" 0 2 (ivy-index 0)) #("fly" 0 3 (ivy-index 0)) #("has" 0 3 (ivy-index 0)) #("haske" 0 5 (ivy-index 0)) #("init-has" 0 8 (ivy-index 0)) #("tree" 0 4 (ivy-index 33)) #("treem" 0 5 (ivy-index 3)) #("haskell" 0 7 (ivy-index 14)) #("leet" 0 4 (ivy-index 0)) #("org" 0 3 (ivy-index 1)) #("use-package" 0 11 (ivy-index 3)) #("yong" 0 4 (ivy-index 50)) #("avy" 0 3 (ivy-index 4)) #("init" 0 4 (ivy-index 18)) #("h" 0 1 (ivy-index 15))))
(setq extended-command-history '("replace-string" "select-frame" "new-frame" "magit-status" "speedbar" "magit-status" "package-list-packages" "speedbar" "run-haskell" "haskell-process-restart" "run-haskell" "haskell-interactive-mode" "speedbar" "package-list-packages" "speedbar" "set-input-method" "speedbar" "replace-string" "emacs-version" "set-input-method" "speedbar" "set-input-method" "eval-buffer" "speedbar" "leetcode" "eval-buffer" "leetcode-try" "java-mode" "leetcode" "leetcode-try"))
(setq ido-file-history '("init-my-edit.el" "UML-Example.org" "Git.org" "." "test.hs" "Hello.hs" "defects.org" "init-haskell.el" "." ".#test02.hs" "test02.hs" "test.hs" "." "learn.org" "init-my-org.el" "Java-8.org" "FlatMapExample.java" "Design-pattern.org" "Git.org" "Frontend.org" "Angular.org" "test.txt" "temp-file.org" "test.txt" "testGPG.org.gpg" "testUbuntu.org.gpg" "test.org.gpg" "." "Haskell.org" "init.el"))
(setq minibuffer-history '("Git-note" "pyim-page-next-page" "haskell-mode-enable-process-minor-mode" "haskell-mode" "vincentYC" "VChenYong" "google" "accurev" "Git-note" "123"))
(setq file-name-history '("~/Yong/My Notes/Git-Notes/.git/COMMIT_EDITMSG" "~/.emacs.d/custom.el" "/usr/share/emacs/25.1/etc/HELLO" "~/Yong/git-notes/test.hs" "~/Downloads/scanf_s.c" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-my-edit.el" "~/Yong/git-notes/Java/Design-pattern.org" "~/.emacs.d/org-clock-save.el" "~/Yong/git-notes/sitemap.org" "~/Yong/git-notes/Chinese/Chinese.org" "~/Yong/git-notes/Chinese/什么是柏拉图式的爱情.org" "~/Yong/git-notes/Chinese/仓央嘉措.org" "~/Yong/git-notes/Chinese/佛家四大经典爱情故事.org" "~/Yong/git-notes/Chinese/具备这九种能必成大事.org" "~/Yong/git-notes/Chinese/如果你心情不好的时候可以来看看这篇文章.org" "~/Yong/git-notes/Emacs/Emacs.org" "~/Yong/git-notes/Emacs/Emacs.Navigation.org" "~/Yong/git-notes/Emacs/emacs.d.org" "~/Yong/git-notes/Emacs/emacs_navigation.org" "~/Yong/git-notes/English/英文已如此搞笑.org" "~/Yong/git-notes/English/英语写作最TOP80个使用高频词搭配.org" "~/Yong/git-notes/English/英语词汇.org" "~/Yong/git-notes/French/French.org" "~/Yong/git-notes/Java/Java-collection.org" "~/Yong/git-notes/Java/Java-IDE.org" "~/Yong/git-notes/Java/Java-Lambdas.org" "~/Yong/git-notes/Java/Java.org" "~/Yong/git-notes/Java/Java-8.org" "~/Yong/git-notes/Java/My-Java.org" "~/Yong/git-notes/Java/UML-Example.org" "~/Yong/git-notes/Misc/Linux.org" "~/Yong/git-notes/agenda/defects.org" "~/Yong/git-notes/agenda/home.org" "~/Yong/git-notes/agenda/journal.org" "~/Yong/git-notes/agenda/learn.org" "~/Yong/git-notes/agenda/personal.org" "~/Yong/git-notes/agenda/work.org" "~/Yong/git-notes/org-html-themes/demo/example.org" "~/Yong/git-notes/org-html-themes/styles/readtheorg/readtheorg.org" "~/Yong/git-notes/AccuRev.org" "~/Yong/git-notes/Angular.org" "~/Yong/git-notes/Frontend.org" "~/Yong/git-notes/Git.org" "~/Yong/git-notes/Guice.org" "~/Yong/git-notes/Haskell.org" "~/Yong/git-notes/Javascript.org" "~/Yong/git-notes/Misc.org" "~/Yong/git-notes/myLinux.org" "~/Yong/git-notes/MyUbuntu.org" "~/Yong/git-notes/Quotes.org" "~/Yong/git-notes/Scala.org" "~/Yong/git-notes/org-mode+Reveal.js Slides.org" "~/Yong/git-notes/Reveal.org" "~/Yong/git-notes/sitemap.org" "~/Yong/git-notes/index.org" "~/Yong/git-notes/agendadefects.org" "~/Yong/git-notes/temp-file.org" "~/Yong/git-notes/agendadefects.org" "~/Yong/git-notes/index.org" "~/Yong/git-notes/Reveal.org" "~/Yong/git-notes/org-mode+Reveal.js Slides.org" "~/Yong/git-notes/Scala.org" "~/Yong/git-notes/Quotes.org" "~/Yong/git-notes/MyUbuntu.org" "~/Yong/git-notes/myLinux.org" "~/Yong/git-notes/Misc.org" "~/Yong/git-notes/Javascript.org" "~/Yong/git-notes/Haskell.org" "~/Yong/git-notes/Guice.org" "~/Yong/git-notes/Git.org" "~/Yong/git-notes/Frontend.org" "~/Yong/git-notes/Angular.org" "~/Yong/git-notes/AccuRev.org" "~/Yong/git-notes/org-html-themes/styles/readtheorg/readtheorg.org" "~/Yong/git-notes/org-html-themes/demo/example.org" "~/Yong/git-notes/agenda/work.org" "~/Yong/git-notes/agenda/personal.org" "~/Yong/git-notes/agenda/learn.org" "~/Yong/git-notes/agenda/journal.org" "~/Yong/git-notes/agenda/home.org" "~/Yong/git-notes/agenda/defects.org" "~/Yong/git-notes/Misc/Linux.org" "~/Yong/git-notes/Java/UML-Example.org" "~/Yong/git-notes/Java/My-Java.org" "~/Yong/git-notes/Java/Java-8.org" "~/Yong/git-notes/Java/Java.org" "~/Yong/git-notes/Java/Java-Lambdas.org" "~/Yong/git-notes/Java/Java-IDE.org" "~/Yong/git-notes/Java/Java-collection.org" "~/Yong/git-notes/French/French.org" "~/Yong/git-notes/English/英语词汇.org" "~/Yong/git-notes/English/英语写作最TOP80个使用高频词搭配.org" "~/Yong/git-notes/English/英文已如此搞笑.org" "~/Yong/git-notes/Emacs/emacs_navigation.org" "~/Yong/git-notes/Emacs/emacs.d.org" "~/Yong/git-notes/Emacs/Emacs.Navigation.org" "~/Yong/git-notes/Emacs/Emacs.org" "~/Yong/git-notes/Chinese/如果你心情不好的时候可以来看看这篇文章.org" "~/Yong/git-notes/Chinese/具备这九种能必成大事.org" "~/Yong/git-notes/Chinese/佛家四大经典爱情故事.org" "~/Yong/git-notes/Chinese/仓央嘉措.org" "~/Yong/git-notes/Chinese/什么是柏拉图式的爱情.org" "~/Yong/git-notes/Chinese/Chinese.org" "~/Yong/git-notes/sitemap.org" "~/.emacs.d/custom.el" "/usr/share/emacs/25.1/etc/HELLO" "~/Yong/git-notes/test.hs"))
(setq ido-buffer-history '("*Messages*" "Git.org" "*Messages*" "*Compile-Log*" "*scratch*" "*Backtrace*" "init-exec-path.el" "defects.org" "home.org" "Git.org" "Angular.org" "magit: .emacs.d" "*Messages*" "*Packages*" "*scratch*" "Hello.hs" "*Messages*" "*scratch*" "init-haskell.el" "init.el" "*haskell*" "journal.org" "personal.org" "temp-file.org" "learn.org" "init-my-org.el" "Java-8.org" "FlatMapExample.java" "Design-pattern.org" "Frontend.org" "Hello.hs" "*scratch*" "Hello.hs" "*Packages*" "test02.hs" "init.el" "git-notes" ".#test02.hs" "init-haskell.el" "test.hs" "init-haskell.el" "test.hs" "*scratch*" "init-pyim.el" "*scratch*" "*leetcode-description*" "two-sum.java" "*Messages*" "two-sum.java" "*Messages*" "two-sum.java" "*leetcode*" "*Messages*" "*leetcode*" "two-sum.java" "*Messages*" "work.org" "*Backtrace*" "init-pyim.el" "init.el" "*scratch*" "init-pyim.el" "*scratch*" "*Org Agenda*" "magit-diff: git-notes" "Angular.org" "*scratch*" " *Minibuf-1*" "*Packages*" nil "*url cookies*" "*eww-source*" "*Backtrace*" "AccuRev.org" "sitemap.org" "FlatMapExample.java" "Misc.org" "git-notes" "Yong" "yong" "init.el" ".ghci" "init.el" "Misc.org" "FlatMapExample.java" "sitemap.org" "*scratch*" "AccuRev.org" "*Messages*" "*scratch*" ".ghci" "*Backtrace*" "test.org.gpg" "COMMIT_EDITMSG" "init-my-edit.el" "init-pyim.el" "init.el" ".emacs.d" "lisp" "auto-save-list" "custom.el" "init-exec-path.el" "AccuRev.org" "*scratch*" "*Backtrace*" "Linux.org" "*Warnings*" "*scratch*" "init.el" "*scratch*" "custom.el" "*scratch*" "*Flycheck error messages*" ".emacs.d" "init.el" ".session" "ibuffer-projectile-autoloads.el" "log4e-autoloads.el" "custom.el" "reveal.js" "js" "Gruntfile.js" "AccuRev.org" "*Backtrace*" "*5x5*" "*Calculator*" "*Open Recent - Edit list*"))
(setq ivy-history '("AccuRev.org" "MyUbuntu.org" "*scratch*" "Haskell.org" "*scratch*" "init-my-edit.el" "init-pyim.el" "init-my-edit.el" "init.el" "*scratch*" "*Messages*" "*scratch*" "init.el" "*scratch*" "init.el" "*Warnings*" "*Messages*" "*scratch*"))
(setq counsel-M-x-history '(#("^package" 0 8 (ivy-index 0)) #("^projec" 0 7 (ivy-index 0)) #("^project" 0 8 (ivy-index 4)) #("^speed" 0 6 (ivy-index 0)) #("^" 0 1 (ivy-index 0)) #("^packa" 0 6 (ivy-index 0)) #("^spee" 0 5 (ivy-index 0)) #("^rep" 0 4 (ivy-index 3)) #("^string" 0 7 (ivy-index 0)) #("^fly" 0 4 (ivy-index 3)) #("^server" 0 7 (ivy-index 1)) #("^eval" 0 5 (ivy-index 1)) #("^show" 0 5 (ivy-index 5)) #("^avy" 0 4 (ivy-index 0)) #("^av" 0 3 (ivy-index 2)) #("^swi" 0 4 (ivy-index 0)) #("^list-i" 0 7 (ivy-index 0)) #("byte" 0 4 (ivy-index 0)) "toggle-input-method" #("package-auto" 0 12 (ivy-index 0)) #("pack" 0 4 (ivy-index 0)) #("speed" 0 5 (ivy-index 0)) #("toggle-input" 0 12 (ivy-index 0)) #("package-list" 0 12 (ivy-index 0)) "calc" "5x5" #("recent" 0 6 (ivy-index 5)) #("project" 0 7 (ivy-index 7))))
