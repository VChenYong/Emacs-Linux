;;; -*- coding: utf-8; -*-
;;; Automatically generated on Sun Sep  8 14:07:54 2019
;;; Invoked by yong@Yong using 25.1.1
(setq-default kill-ring '(";; Disable every prompt during an org-mode export, when using plantuml.
;; Useful when you have multiple UML diagrams in an org doc, and you don't
;; want to type 'y' on every export prompt.
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang \"plantuml\")))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)" "plantuml" "file:///home/yong/Yong/git-notes/Img" "sudo apt-get install graphviz" #("廖伟:
你好, 我们一却都好. 你们呢?
茉莉已经上幼儿园2年了.现在适应的还不错. 你的小棉袄也应该上幼儿园1,2年了吧? 
下面是我的信息,看看还有没有别的需要的.


Surname: Chen
Given name: Yong
Date of birth: 03-mars-1973
passport number: HD021249
Date of issue: 05 mars 2015
Date of expiry 05 mars 2025
address 1956 rue Jean-deslauriers Laval Quebec Canada H7S 1G2


祝好,

陈泳" 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified t) 4 21 (fontified t) 21 51 (fontified t) 51 58 (fontified t) 58 63 (fontified t) 63 64 (fontified t) 64 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (fontified t) 87 101 (fontified t) 101 118 (fontified t) 118 146 (fontified t) 146 172 (fontified t) 172 200 (fontified t) 200 228 (fontified t) 228 249 (fontified t) 249 250 (fontified t) 250 262 (fontified t) 262 263 (fontified t) 263 289 (fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 292 (fontified t) 292 296 (fontified t) 296 297 (fontified t) 297 299 (fontified t)) #("上幼儿园" 0 4 (fontified t)) "wei liao"))
(setq-default session-file-alist '(("~/.emacs.d/custom.el" 1 nil 1 nil nil 2424 (overwrite-mode)) ("~/Yong/git-notes/Java/Design-pattern.org" 2496 2490 1 nil nil 2497 (overwrite-mode)) ("~/.emacs.d/lisp/init-my-edit.el" 1854 1515 1 nil nil 1854 (overwrite-mode)) ("~/Yong/git-notes/sitemap.org" 2394 nil 1 nil nil 2394 (overwrite-mode)) ("~/.emacs.d/org-clock-save.el" 52 nil 1 nil nil 52 (overwrite-mode)) ("~/Yong/git-notes/test.hs" 11 1 1 nil nil 12 (overwrite-mode)) ("~/.stack/global-project/.stack-work/intero/intero-script18061sWV" 82 nil 1 nil nil 82 (overwrite-mode)) ("~/.emacs.d/init.el" 3493 3493 1 nil nil 3493 (overwrite-mode)) ("~/Yong/git-notes/Angular.org" 1066 387 1 nil nil 146 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/flycheck-20190709.1443/flycheck-autoloads.el" 8455 nil 1 nil nil 8455 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/flycheck-clojure-20190611.2351/flycheck-clojure-autoloads.el" 638 nil 1 nil nil 638 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/forge-20190726.1558/forge-autoloads.el" 6370 nil 1 nil nil 6370 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/ghub-20190710.2214/ghub-autoloads.el" 1375 nil 1 nil nil 1375 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/git-commit-20190717.29/git-commit-autoloads.el" 1321 nil 1 nil nil 1321 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/haskell-mode-20190714.652/haskell-mode-autoloads.el" 33348 nil 1 nil nil 33348 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/ht-20190611.2131/ht-autoloads.el" 239 nil 1 nil nil 239 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/intero-20190530.1308/intero-autoloads.el" 1543 nil 1 nil nil 1543 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/ivy-20190726.2134/ivy-autoloads.el" 4629 nil 1 nil nil 4629 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/ivy-xref-20190611.1305/ivy-xref-autoloads.el" 521 nil 1 nil nil 521 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/js-comint-20190606.6/js-comint-autoloads.el" 2286 nil 1 nil nil 2286 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/js2-mode-20190606.1008/js2-mode-autoloads.el" 1782 nil 1 nil nil 1782 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/ledger-mode-20190709.548/ledger-mode-autoloads.el" 1331 nil 1 nil nil 1331 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/leetcode-20190706.1622/leetcode-autoloads.el" 386 nil 1 nil nil 386 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/magit-20190727.1910/magit-autoloads.el" 78463 nil 1 nil nil 15734 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/math-symbol-lists-20190605.2058/math-symbol-lists-autoloads.el" 319 nil 1 nil nil 319 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/move-dup-20190408.1246/move-dup-autoloads.el" 3080 nil 1 nil nil 3080 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/package-lint-20190707.1456/package-lint-autoloads.el" 1192 nil 1 nil nil 1192 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/page-break-lines-20190519.2238/page-break-lines-autoloads.el" 2900 nil 1 nil nil 2900 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/projectile-20190626.1315/projectile-autoloads.el" 19711 nil 1 nil nil 19711 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/purescript-mode-20190522.2230/purescript-mode-autoloads.el" 11770 nil 1 nil nil 11770 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/pyim-20190727.2332/pyim-autoloads.el" 1844 nil 1 nil nil 1844 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/pyim-basedict-20190719.1252/pyim-basedict-autoloads.el" 511 nil 1 nil nil 511 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/pythonic-20190725.1258/pythonic-autoloads.el" 503 nil 1 nil nil 503 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/racer-20190610.800/racer-autoloads.el" 764 nil 1 nil nil 764 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/reformatter-20190529.2238/reformatter-autoloads.el" 1968 nil 1 nil nil 1968 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/request-20190727.1416/request-autoloads.el" 249 nil 1 nil nil 249 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/restclient-20190502.2214/restclient-autoloads.el" 969 nil 1 nil nil 969 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/rust-mode-20190517.2037/rust-mode-autoloads.el" 464 nil 1 nil nil 464 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/sass-mode-20190502.53/sass-mode-autoloads.el" 474 nil 1 nil nil 474 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/sesman-20190623.1123/sesman-autoloads.el" 3038 nil 1 nil nil 2574 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/slime-20190724.1352/slime-autoloads.el" 1503 nil 1 nil nil 1503 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/spacemacs-theme-20190617.633/spacemacs-theme-autoloads.el" 611 nil 1 nil nil 611 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/sqlformat-20190420.2256/sqlformat-autoloads.el" 763 nil 1 nil nil 763 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/swiper-20190726.1746/swiper-autoloads.el" 1299 nil 1 nil nil 1299 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/symbol-overlay-20190608.442/symbol-overlay-autoloads.el" 2473 nil 1 nil nil 2473 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/tablist-20190414.643/tablist-autoloads.el" 793 nil 1 nil nil 793 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/transient-20190630.1359/transient-autoloads.el" 279 nil 1 nil nil 279 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/typescript-mode-20190710.2011/typescript-mode-autoloads.el" 868 nil 1 nil nil 868 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/use-package-20190716.1829/use-package-autoloads.el" 7387 nil 1 nil nil 7387 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/whole-line-or-region-20190411.215/whole-line-or-region-autoloads.el" 4896 nil 1 nil nil 4896 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/with-editor-20190715.2007/with-editor-autoloads.el" 3211 nil 1 nil nil 3211 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/yaml-mode-20190625.1740/yaml-mode-autoloads.el" 612 nil 1 nil nil 612 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/yasnippet-20190724.1204/yasnippet-autoloads.el" 1537 nil 1 nil nil 1537 (overwrite-mode))))
(setq-default file-name-history '("~/Yong/My Notes/Git-Notes/.git/COMMIT_EDITMSG" "~/.emacs.d/custom.el" "/usr/share/emacs/25.1/etc/HELLO" "~/Yong/git-notes/test.hs" "~/Downloads/scanf_s.c" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-my-edit.el" "~/Yong/git-notes/Java/Design-pattern.org" "~/.emacs.d/org-clock-save.el" "~/Yong/git-notes/sitemap.org" "~/Yong/git-notes/Chinese/Chinese.org" "~/Yong/git-notes/Chinese/什么是柏拉图式的爱情.org" "~/Yong/git-notes/Chinese/仓央嘉措.org" "~/Yong/git-notes/Chinese/佛家四大经典爱情故事.org" "~/Yong/git-notes/Chinese/具备这九种能必成大事.org" "~/Yong/git-notes/Chinese/如果你心情不好的时候可以来看看这篇文章.org" "~/Yong/git-notes/Emacs/Emacs.org" "~/Yong/git-notes/Emacs/Emacs.Navigation.org" "~/Yong/git-notes/Emacs/emacs.d.org" "~/Yong/git-notes/Emacs/emacs_navigation.org" "~/Yong/git-notes/English/英文已如此搞笑.org" "~/Yong/git-notes/English/英语写作最TOP80个使用高频词搭配.org" "~/Yong/git-notes/English/英语词汇.org" "~/Yong/git-notes/French/French.org" "~/Yong/git-notes/Java/Java-collection.org" "~/Yong/git-notes/Java/Java-IDE.org" "~/Yong/git-notes/Java/Java-Lambdas.org" "~/Yong/git-notes/Java/Java.org" "~/Yong/git-notes/Java/Java-8.org" "~/Yong/git-notes/Java/My-Java.org" "~/Yong/git-notes/Java/UML-Example.org" "~/Yong/git-notes/Misc/Linux.org" "~/Yong/git-notes/agenda/defects.org" "~/Yong/git-notes/agenda/home.org" "~/Yong/git-notes/agenda/journal.org" "~/Yong/git-notes/agenda/learn.org" "~/Yong/git-notes/agenda/personal.org" "~/Yong/git-notes/agenda/work.org" "~/Yong/git-notes/org-html-themes/demo/example.org" "~/Yong/git-notes/org-html-themes/styles/readtheorg/readtheorg.org" "~/Yong/git-notes/AccuRev.org" "~/Yong/git-notes/Angular.org" "~/Yong/git-notes/Frontend.org" "~/Yong/git-notes/Git.org" "~/Yong/git-notes/Guice.org" "~/Yong/git-notes/Haskell.org" "~/Yong/git-notes/Javascript.org" "~/Yong/git-notes/Misc.org" "~/Yong/git-notes/myLinux.org" "~/Yong/git-notes/MyUbuntu.org" "~/Yong/git-notes/Quotes.org" "~/Yong/git-notes/Scala.org" "~/Yong/git-notes/org-mode+Reveal.js Slides.org" "~/Yong/git-notes/Reveal.org" "~/Yong/git-notes/index.org" "~/Yong/git-notes/agendadefects.org" "~/Yong/git-notes/temp-file.org"))
(setq-default search-ring '("init" "init-my" "pyim" "init-spelling" "chinese" "pin"))
(setq-default regexp-search-ring '("my" "fly" "has" "haskell" "leet" "org" "yong" "avy" "init" "h"))
(setq-default buffer-name-history '("*Messages*" "Git.org" "*Compile-Log*" "*scratch*" "*Backtrace*" "init-exec-path.el" "defects.org" "home.org" "Angular.org" "magit: .emacs.d" "*Packages*"))
(setq-default command-history '((find-file "/home/yong/.emacs.d/lisp/init-my-edit.el") (find-file "/home/yong/Yong/git-notes/Java/UML-Example.org") (switch-to-buffer "*Messages*") (switch-to-buffer "Git.org") (switch-to-buffer "*Compile-Log*") (find-file "/home/yong/Yong/git-notes/Git.org") (switch-to-buffer "*scratch*") (replace-string "mp4" "7z" nil (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil) (replace-string "7z" "mp4" nil (if \.\.\. \.\.\.) (if \.\.\. \.\.\.) nil) (dired "/media/yong/Data/temp/programming/SBT test/data/") (describe-function (quote pyim-page-next-page)) (kill-buffer "*scratch*") (find-file "/home/yong/Yong/git-notes/test.hs") (kill-buffer "*Backtrace*") (find-file "/home/yong/Yong/git-notes/Hello.hs") (kill-buffer "init-exec-path.el") (kill-buffer "defects.org") (kill-buffer "home.org") (kill-buffer "Git.org") (kill-buffer "Angular.org") (new-frame) (magit-status nil (quote \.\.\.)) (speedbar nil) (kill-buffer "magit: .emacs.d") (kill-buffer "*Messages*") (package-list-packages nil) (kill-buffer "*Packages*")))
(setq-default counsel-M-x-history '(#("^package" 0 8 (ivy-index 0)) #("^projec" 0 7 (ivy-index 0)) #("^project" 0 8 (ivy-index 4)) #("^speed" 0 6 (ivy-index 0)) #("^" 0 1 (ivy-index 0)) #("^packa" 0 6 (ivy-index 0)) #("^spee" 0 5 (ivy-index 0)) #("^rep" 0 4 (ivy-index 3)) #("^string" 0 7 (ivy-index 0)) #("^fly" 0 4 (ivy-index 3)) #("^server" 0 7 (ivy-index 1)) #("^eval" 0 5 (ivy-index 1)) #("^show" 0 5 (ivy-index 5)) #("^avy" 0 4 (ivy-index 0)) #("^av" 0 3 (ivy-index 2)) #("^swi" 0 4 (ivy-index 0)) #("^list-i" 0 7 (ivy-index 0)) #("byte" 0 4 (ivy-index 0)) "toggle-input-method" #("package-auto" 0 12 (ivy-index 0)) #("pack" 0 4 (ivy-index 0)) #("speed" 0 5 (ivy-index 0)) #("toggle-input" 0 12 (ivy-index 0)) #("package-list" 0 12 (ivy-index 0)) "calc" "5x5" #("recent" 0 6 (ivy-index 5)) #("project" 0 7 (ivy-index 7))))
(setq-default counsel-describe-symbol-history '(#("^swiper" 0 7 (ivy-index 0))))
(setq-default extended-command-history '("replace-string" "select-frame" "new-frame" "magit-status" "speedbar" "package-list-packages" "run-haskell" "haskell-process-restart" "haskell-interactive-mode" "set-input-method" "emacs-version" "eval-buffer" "leetcode" "leetcode-try" "java-mode"))
(setq-default ido-file-history '("init-my-edit.el" "UML-Example.org" "Git.org" "." "test.hs" "Hello.hs" "defects.org" "init-haskell.el" ".#test02.hs" "test02.hs" "learn.org" "init-my-org.el" "Java-8.org" "FlatMapExample.java" "Design-pattern.org" "Frontend.org" "Angular.org" "test.txt" "temp-file.org" "testGPG.org.gpg" "testUbuntu.org.gpg" "test.org.gpg" "Haskell.org" "init.el"))
(setq-default ivy-history '("AccuRev.org" "MyUbuntu.org" "*scratch*" "Haskell.org" "init-my-edit.el" "init-pyim.el" "init.el" "*Messages*" "*Warnings*"))
(setq-default minibuffer-history '("Git-note" "pyim-page-next-page" "haskell-mode-enable-process-minor-mode" "haskell-mode" "vincentYC" "VChenYong" "google" "accurev" "123"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default org-refile-history '("Emacs" "Emacs/"))
(setq-default org-tags-history '("test" "crypt" "yong"))
(setq-default query-replace-history '("7z" "mp4"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default slime-connect-host-history '("localhost"))
(setq-default slime-connect-port-history '("4005"))
(setq-default smex-history '(replace-string new-frame magit-status speedbar package-list-packages byte-compile-file toggle-input-method))
(setq-default swiper-history '(#("my" 0 2 (ivy-index 0)) #("fly" 0 3 (ivy-index 0)) #("has" 0 3 (ivy-index 0)) #("haske" 0 5 (ivy-index 0)) #("init-has" 0 8 (ivy-index 0)) #("tree" 0 4 (ivy-index 33)) #("treem" 0 5 (ivy-index 3)) #("haskell" 0 7 (ivy-index 14)) #("leet" 0 4 (ivy-index 0)) #("org" 0 3 (ivy-index 1)) #("use-package" 0 11 (ivy-index 3)) #("yong" 0 4 (ivy-index 50)) #("avy" 0 3 (ivy-index 4)) #("init" 0 4 (ivy-index 18)) #("h" 0 1 (ivy-index 15))))
