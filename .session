;;; -*- coding: utf-8; -*-
;;; Automatically generated on Sun Mar 31 15:45:43 2019
;;; Invoked by yong@Yong using 25.1.1
(setq-default kill-ring '(#("(require 'init-pyim nil t)" 0 1 (face \.\.\. fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 10 (face highlight-quoted-quote fontified t) 10 19 (face font-lock-constant-face fontified t) 19 25 (fontified t) 25 26 (face \.\.\. fontified t)) #("Cannot open load file: No such file or directory, chinese-pyim" 0 62 (fontified t)) #("(require 'init-pyim nil t)" 0 1 (fontified t face \.\.\.) 1 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t face highlight-quoted-quote) 10 19 (fontified t face font-lock-constant-face) 19 25 (fontified t) 25 26 (fontified t face \.\.\.)) #("(require 'init-pyim nil t)
" 0 1 (fontified nil face \.\.\. whole-line-or-region t) 1 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 10 (fontified nil face highlight-quoted-quote) 10 19 (fontified nil face font-lock-constant-face) 19 25 (fontified nil) 25 26 (fontified nil face \.\.\.) 26 27 (fontified nil)) #("(add-to-list 'auto-mode-alist '(\"\\\\.js\\\\'\" . js2-mode))
(require 'js2-refactor)
(add-hook 'js2-mode-hook #'js2-refactor-mode)
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
(setq js2-skip-preprocessor-directives t)
(js2r-add-keybindings-with-prefix \"C-c C-m\")" 0 1 (fontified t face \.\.\.) 1 13 (fontified t) 13 14 (fontified t face highlight-quoted-quote) 14 29 (fontified t face highlight-quoted-symbol) 29 30 (fontified t) 30 31 (fontified t face highlight-quoted-quote) 31 32 (fontified t face \.\.\.) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face \.\.\.) 34 35 (fontified t face \.\.\.) 35 38 (fontified t face font-lock-string-face) 38 39 (fontified t face \.\.\.) 39 40 (fontified t face \.\.\.) 40 42 (fontified t face font-lock-string-face) 42 53 (fontified t) 53 54 (fontified t face \.\.\.) 54 55 (fontified t face \.\.\.) 55 56 (fontified t) 56 57 (face \.\.\. fontified t) 57 64 (face font-lock-keyword-face fontified t) 64 65 (fontified t) 65 66 (face highlight-quoted-quote fontified t) 66 78 (face font-lock-constant-face fontified t) 78 79 (face \.\.\. fontified t) 79 80 (fontified t) 80 81 (face \.\.\. fontified t) 81 90 (fontified t) 90 91 (face highlight-quoted-quote fontified t) 91 104 (face highlight-quoted-symbol fontified t) 104 105 (fontified t) 105 107 (face highlight-quoted-quote fontified t) 107 124 (face highlight-quoted-symbol fontified t) 124 125 (face \.\.\. fontified t) 125 126 (fontified t) 126 127 (face \.\.\. fontified t) 127 136 (fontified t) 136 137 (face highlight-quoted-quote fontified t) 137 150 (face highlight-quoted-symbol fontified t) 150 151 (fontified t) 151 153 (face highlight-quoted-quote fontified t) 153 174 (face highlight-quoted-symbol fontified t) 174 175 (face \.\.\. fontified t) 175 176 (fontified t) 176 177 (face \.\.\. fontified t) 177 181 (face font-lock-keyword-face fontified t) 181 216 (fontified t) 216 217 (face \.\.\. fontified t) 217 218 (fontified t) 218 219 (face \.\.\. fontified t) 219 252 (fontified t) 252 261 (face font-lock-string-face fontified t) 261 262 (face \.\.\. fontified t)) #("(use-package projectile
             :ensure t
             :pin melpa-stable
             :config
             (define-key projectile-mode-map (kbd \"s-p\") 'projectile-command-map)
             (define-key projectile-mode-map (kbd \"C-c p\") 'projectile-command-map))
" 0 1 (face \.\.\. fontified t) 1 37 (fontified t) 37 44 (face font-lock-builtin-face fontified t) 44 60 (fontified t) 60 64 (face font-lock-builtin-face fontified t) 64 91 (fontified t) 91 98 (face font-lock-builtin-face fontified t) 98 112 (fontified t) 112 113 (face \.\.\. fontified t) 113 144 (fontified t) 144 145 (face \.\.\. fontified t) 145 149 (fontified t) 149 154 (face font-lock-string-face fontified t) 154 155 (face \.\.\. fontified t) 155 156 (fontified t) 156 157 (face highlight-quoted-quote fontified t) 157 179 (face highlight-quoted-symbol fontified t) 179 180 (face \.\.\. fontified t) 180 181 (fontified t) 181 194 (fontified t) 194 195 (face \.\.\. fontified t) 195 226 (fontified t) 226 227 (face \.\.\. fontified t) 227 231 (fontified t) 231 238 (face font-lock-string-face fontified t) 238 239 (face \.\.\. fontified t) 239 240 (fontified t) 240 241 (face highlight-quoted-quote fontified t) 241 263 (face highlight-quoted-symbol fontified t) 263 264 (face \.\.\. fontified t) 264 265 (face \.\.\. fontified t) 265 266 (fontified t)) #("             (projectile-mode +1)" 0 13 (fontified t) 13 14 (fontified t face \.\.\.) 14 32 (fontified t) 32 33 (fontified t face \.\.\.)) #("(require 'init-spelling)" 0 1 (fontified t face \.\.\.) 1 4 (fontified t face font-lock-keyword-face) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t face highlight-quoted-quote) 10 23 (fontified t face font-lock-constant-face) 23 24 (fontified t face \.\.\.)) "file:///home/yong/Yong/git-notes/Img" "file:///home/yong/New Folder/emacs.d/site-lisp"))
(setq-default session-file-alist '(("~/.emacs.d/custom.el" 1 nil 1 nil nil 2424 (overwrite-mode)) ("~/.emacs.d/init.el" 2722 2741 1 nil nil 2722 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/erlang-20190322.947/erlang-autoloads.el" 6114 nil 1 nil nil 6114 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/crontab-mode-20190304.1423/crontab-mode-autoloads.el" 519 nil 1 nil nil 519 (overwrite-mode)) ("~/.emacs.d/lisp/init-exec-path.el" 568 1 1 nil nil 568 (overwrite-mode)) ("~/Yong/git-notes/AccuRev.org" 5107 5107 1 nil nil 5106 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/pyim-20190310.1058/pyim-autoloads.el" 1776 nil 1 nil nil 1776 (overwrite-mode)) ("~/.emacs.d/elpa-25.1/pyim-basedict-20170727.259/pyim-basedict-autoloads.el" 511 nil 1 nil nil 511 (overwrite-mode)) ("~/Yong/git-notes/sitemap.org" 2318 nil 1 nil nil 2318 (overwrite-mode)) ("~/.emacs.d/.session" 5408 5389 1 nil nil 5408 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/lisp/init-editing-utils.el" "~/Yong/git-notes/AccuRev.org" "~/.emacs.d/lisp/init-exec-path.el" "~/.emacs.d/custom.el" "~/.emacs.d/#!home!yong!.emacs.d!lisp!init-exec-path.el#" "~/.emacs.d/init.el" "~/.emacs.d/org-clock-save.el" "/home/yong/.emacs.d/init.el" "/home/yong/.emacs.d/#!home!yong!.emacs.d!lisp!init-exec-path.el#" "/home/yong/Yong/git-notes/AccuRev.org" "~/.emacs.d/elpa-25.1/pyim-20190310.1058/pyim-autoloads.el" "~/.emacs.d/elpa-25.1/pyim-basedict-20170727.259/pyim-basedict-autoloads.el" "~/.emacs.d/elpa-25.1/log4e-20170401.1304/log4e-autoloads.el" "~/.emacs.d/elpa-25.1/ibuffer-projectile-20181202.352/ibuffer-projectile-autoloads.el" "~/Yong/git-notes/sitemap.org" "~/Yong/git-notes/Chinese/Chinese.org" "~/Yong/git-notes/Chinese/什么是柏拉图式的爱情.org" "~/Yong/git-notes/Chinese/仓央嘉措.org" "~/Yong/git-notes/Chinese/佛家四大经典爱情故事.org" "~/Yong/git-notes/Chinese/具备这九种能必成大事.org" "~/Yong/git-notes/Chinese/如果你心情不好的时候可以来看看这篇文章.org" "~/Yong/git-notes/Emacs/Emacs.org" "~/Yong/git-notes/Emacs/Emacs.Navigation.org" "~/Yong/git-notes/Emacs/emacs.d.org" "~/Yong/git-notes/Emacs/emacs_navigation.org" "~/Yong/git-notes/English/英文已如此搞笑.org" "~/Yong/git-notes/English/英语写作最TOP80个使用高频词搭配.org" "~/Yong/git-notes/English/英语词汇.org" "~/Yong/git-notes/French/French.org" "~/Yong/git-notes/Java/Design-pattern.org" "~/Yong/git-notes/Java/Java-collection.org" "~/Yong/git-notes/Java/Java-IDE.org" "~/Yong/git-notes/Java/Java-Lambdas.org" "~/Yong/git-notes/Java/Java.org" "~/Yong/git-notes/Java/Java-8.org" "~/Yong/git-notes/Java/My-Java.org" "~/Yong/git-notes/Java/UML-Example.org" "~/Yong/git-notes/Misc/Linux.org" "~/Yong/git-notes/agenda/defects.org" "~/Yong/git-notes/agenda/home.org" "~/Yong/git-notes/agenda/journal.org" "~/Yong/git-notes/agenda/learn.org" "~/Yong/git-notes/agenda/personal.org" "~/Yong/git-notes/agenda/work.org" "~/Yong/git-notes/org-html-themes/demo/example.org" "~/Yong/git-notes/org-html-themes/styles/readtheorg/readtheorg.org" "~/Yong/git-notes/Angular.org" "~/Yong/git-notes/Git.org"))
(setq-default search-ring '("pyim" "init-spelling" "chinese" "pin"))
(setq-default buffer-name-history '("*scratch*" "custom.el" "*Flycheck error messages*" ".emacs.d" "init.el" ".session" "ibuffer-projectile-autoloads.el" "log4e-autoloads.el" "reveal.js" "js" "Gruntfile.js" "AccuRev.org" "*Backtrace*" "*5x5*" "*Calculator*" "*Open Recent - Edit list*"))
(setq-default command-history '((byte-compile-file "/home/yong/.emacs.d/init.el" nil) (find-file "/home/yong/.emacs.d/init.el") (switch-to-buffer "*scratch*") (kill-buffer "custom.el") (toggle-input-method nil 1) (kill-buffer "*scratch*") (package-autoremove) (package-list-packages nil) (speedbar nil) (kill-buffer "*Flycheck error messages*") (kill-buffer ".emacs.d") (kill-buffer "init.el") (kill-buffer ".session") (kill-buffer "ibuffer-projectile-autoloads.el") (kill-buffer "log4e-autoloads.el") (kill-buffer "reveal.js") (kill-buffer "js") (kill-buffer "Gruntfile.js") (kill-buffer "AccuRev.org") (kill-buffer "*Backtrace*") (kill-buffer "*5x5*") (kill-buffer "*Calculator*") (calc nil nil 1) (5x5 nil) (kill-buffer "*Open Recent - Edit list*") (recentf-edit-list) (project-find-file)))
(setq-default counsel-M-x-history '(#("byte" 0 4 (ivy-index 0)) "toggle-input-method" #("package-auto" 0 12 (ivy-index 0)) #("pack" 0 4 (ivy-index 0)) #("speed" 0 5 (ivy-index 0)) #("toggle-input" 0 12 (ivy-index 0)) #("package-list" 0 12 (ivy-index 0)) "calc" "5x5" #("recent" 0 6 (ivy-index 5)) #("project" 0 7 (ivy-index 7))))
(setq-default counsel-git-grep-cmd-history '("git --no-pager grep --full-name -n --no-color -i -I -e \"%s\""))
(setq-default ido-buffer-history '("*scratch*" "custom.el" "*Flycheck error messages*" ".emacs.d" "init.el" ".session" "ibuffer-projectile-autoloads.el" "log4e-autoloads.el" "reveal.js" "js" "Gruntfile.js" "AccuRev.org" "*Backtrace*" "*5x5*" "*Calculator*" "*Open Recent - Edit list*"))
(setq-default ido-file-history '("init.el"))
(setq-default ivy-history '("*scratch*" "*Messages*" "init.el" "*Warnings*"))
(setq-default minibuffer-history '("Git-note" "123"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default slime-connect-host-history '("localhost"))
(setq-default slime-connect-port-history '("4005"))
(setq-default smex-history '(byte-compile-file toggle-input-method package-autoremove package-list-packages speedbar calc 5x5))
